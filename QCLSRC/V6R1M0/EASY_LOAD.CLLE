             PGM        PARM(&FUNCS_PTR)
             DCL        VAR(&FUNCS_PTR) TYPE(*PTR)
             DCL        VAR(&PA)        TYPE(*CHAR) STG(*BASED) LEN(160) BASPTR(&FUNCS_PTR)
             DCL        VAR(&SYMB_01)   TYPE(*CHAR) LEN(30) VALUE('curl_easy_init')
             DCL        VAR(&SYMB_02)   TYPE(*CHAR) LEN(30) VALUE('curl_easy_setopt')
             DCL        VAR(&SYMB_03)   TYPE(*CHAR) LEN(30) VALUE('curl_slist_append')
             DCL        VAR(&SYMB_04)   TYPE(*CHAR) LEN(30) VALUE('curl_easy_perform')
             DCL        VAR(&SYMB_05)   TYPE(*CHAR) LEN(30) VALUE('curl_easy_cleanup')
             DCL        VAR(&SYMB_06)   TYPE(*CHAR) LEN(30) VALUE('CallbackPtr')
             DCL        VAR(&SYMB_07)   TYPE(*CHAR) LEN(30) VALUE('VersionInfo')
             DCL        VAR(&SYMB_08)   TYPE(*CHAR) LEN(30) VALUE('curl_easy_getinfo')
             DCL        VAR(&FUNCTION1) TYPE(*CHAR)  STG(*DEFINED) LEN(8) DEFVAR(&PA  1)   /* curl_EASY_INIT    */
             DCL        VAR(&FUNCTION2) TYPE(*CHAR)  STG(*DEFINED) LEN(8) DEFVAR(&PA  9)   /* curl_EASY_SETOPt  */
             DCL        VAR(&FUNCTION3) TYPE(*CHAR)  STG(*DEFINED) LEN(8) DEFVAR(&PA 17)   /* curl_SLIST_APPEnd */
             DCL        VAR(&FUNCTION4) TYPE(*CHAR)  STG(*DEFINED) LEN(8) DEFVAR(&PA 25)   /* curl_EASY_PERFOrm */
             DCL        VAR(&FUNCTION5) TYPE(*CHAR)  STG(*DEFINED) LEN(8) DEFVAR(&PA 33)   /* curl_EASY_CLEANup */
             DCL        VAR(&FUNCTION6) TYPE(*CHAR)  STG(*DEFINED) LEN(8) DEFVAR(&PA 41)   /* CallbackPtr       */
             DCL        VAR(&FUNCTION7) TYPE(*CHAR)  STG(*DEFINED) LEN(8) DEFVAR(&PA 49)   /* VersionInfo       */
             DCL        VAR(&FUNCTION8) TYPE(*CHAR)  STG(*DEFINED) LEN(8) DEFVAR(&PA 57)   /* curl_EASY_GetINFO */
             DCL        VAR(&ROOT)       TYPE(*CHAR) STG(*DEFINED) LEN(60) DEFVAR(&PA 81)  /* PaseOssPath       */
             DCL        VAR(&CERT)       TYPE(*CHAR) STG(*DEFINED) LEN(20) DEFVAR(&PA 141) /* certs bundle      */
             DCL        VAR(&ERR_P)     TYPE(*PTR)                                             ADDRESS(*NULL)
             DCL        VAR(&MSG)       TYPE(*CHAR) STG(*BASED)   LEN(300)                     BASPTR(&ERR_P)
             DCL        VAR(&NL)        TYPE(*CHAR)               LEN(1)                       VALUE(X'00')
             DCL        VAR(&RTCD)      TYPE(*INT)
             DCL        VAR(&SYNM_P)    TYPE(*PTR)                                             ADDRESS(*NULL)
             DCL        VAR(&SYDT_P)    TYPE(*PTR)                                             ADDRESS(*NULL)
             DCL        VAR(&SYDT_L)    TYPE(*UINT)                                            VALUE(0)
             DCL        VAR(&P_CCSID)   TYPE(*INT)                                             VALUE(1208)
             DCL        VAR(&PATH)      TYPE(*CHAR)               LEN(50)
             DCL        VAR(&ARGV_P)    TYPE(*PTR)                                             ADDRESS(&PATH)
        /*   DCL        VAR(&ENV)       TYPE(*PTR)                                             ADDRESS(*NULL) */
        /*   DCL        VAR(&ENV_P)     TYPE(*PTR)                                             ADDRESS(&ENV)  */
             /* */
             DCL        VAR(&ENVARA)    TYPE(*CHAR) LEN(48)
             DCL        VAR(&ENV1P)     TYPE(*PTR)  STG(*DEFINED)  DEFVAR(&ENVARA  1)
             DCL        VAR(&ENV2P)     TYPE(*PTR)  STG(*DEFINED)  DEFVAR(&ENVARA  17)
             DCL        VAR(&ENV3P)     TYPE(*PTR)  STG(*DEFINED)  DEFVAR(&ENVARA  33)
             DCL        VAR(&ENV_P)     TYPE(*PTR)                                             ADDRESS(&ENVARA)
             /* */
             DCL        VAR(&PSIZE)     TYPE(*INT)   VALUE(0)
             DCL        VAR(&S_CCSID)   TYPE(*CHAR)  LEN(5)
             DCL        VAR(&PATH2)     TYPE(*CHAR)  LEN(70)
             DCL        VAR(&FLAGS)     TYPE(*UINT)  VALUE(2)
             DCL        VAR(&CCSID)     TYPE(*INT)   VALUE(0)
             DCL        VAR(&ID)        TYPE(*CHAR) LEN(8) VALUE(X'FFFFFFFFFFFFFFFF')
             DCL        VAR(&IDC)       TYPE(*CHAR) LEN(8) VALUE(X'FFFFFFFFFFFFFFFF')
             DCL        VAR(&SYMB_P)    TYPE(*PTR)   ADDRESS(*NULL)
             DCL        VAR(&RT_P)      TYPE(*PTR)   ADDRESS(*NULL)
             DCL        VAR(&RT)        TYPE(*CHAR) STG(*BASED) LEN(8) BASPTR(&RT_P)

             CHGVAR     VAR(&SYMB_01) VALUE(&SYMB_01 *TCAT &NL)
             CHGVAR     VAR(&SYMB_02) VALUE(&SYMB_02 *TCAT &NL)
             CHGVAR     VAR(&SYMB_03) VALUE(&SYMB_03 *TCAT &NL)
             CHGVAR     VAR(&SYMB_04) VALUE(&SYMB_04 *TCAT &NL)
             CHGVAR     VAR(&SYMB_05) VALUE(&SYMB_05 *TCAT &NL)
             CHGVAR     VAR(&SYMB_06) VALUE(&SYMB_06 *TCAT &NL)
             CHGVAR     VAR(&SYMB_07) VALUE(&SYMB_07 *TCAT &NL)
             CHGVAR     VAR(&SYMB_08) VALUE(&SYMB_08 *TCAT &NL)
             CHGVAR     VAR(&PATH) VALUE(&ROOT *TCAT '/lib/paseoss_start32' *CAT &NL)
             CHGVAR     VAR(&ENV1P) VALUE(*NULL)
             CHGVAR     VAR(&ENV2P) VALUE(*NULL)
             CHGVAR     VAR(&ENV3P) VALUE(*NULL)
RETRY:       CALLPRC    PRC('Qp2RunPase') PARM((&PATH) (&SYNM_P *BYVAL) (&SYDT_P *BYVAL) (&SYDT_L *BYVAL) +
                          (&P_CCSID *BYVAL) (&ARGV_P) (&ENV_P *BYVAL)) RTNVAL(&RTCD)
             MONMSG     MSGID(CPFB9C0) EXEC(GOTO CMDLBL(FINE))
             MONMSG     MSGID(CPFB9C7) EXEC(DO)
             CALLPRC    PRC('Qp2EndPase') RTNVAL(&RTCD)
             GOTO       CMDLBL(RETRY)
             ENDDO

             IF         COND(&RTCD *NE -2) THEN(DO)
             SNDPGMMSG  MSG('Qp2RunPase non ha restituito QP2RUNPASE_RETURN_NOEXIT')
             GOTO       CMDLBL(FINE)
             ENDDO

             CALLPRC    PRC('Qp2ptrsize') RTNVAL(&PSIZE)
         /*  IF         COND(&PSIZE *EQ 4) THEN(SNDPGMMSG MSG('PASE in 32-bit mode')) */
             IF         COND(&PSIZE *EQ 8) THEN(SNDPGMMSG MSG('PASE in 64-bit mode'))

             CALLPRC    PRC('Qp2paseCCSID') RTNVAL(&P_CCSID)
             CHGVAR     VAR(&S_CCSID) VALUE(&P_CCSID)
          /* SNDPGMMSG MSG('PASE CCSID set to ' *CAT &S_CCSID) */
             CHGVAR     VAR(&FLAGS) VALUE(262146)
             CHGVAR     VAR(&PATH2) VALUE(&ROOT *TCAT '/lib/libcurl.a(shr.o)' *TCAT &NL)

             CALLPRC    PRC('Qp2dlopen') PARM((&PATH2) (&FLAGS *BYVAL) (&CCSID *BYVAL)) RTNVAL(&ID)
             CALLPRC    PRC('Qp2dlerror') RTNVAL(&ERR_P)
             IF         COND(&ERR_P *NE *NULL) THEN(DO)
             SNDPGMMSG  MSG(&MSG)
             GOTO       CMDLBL(END)
             ENDDO
          /* SNDPGMMSG MSG('PASE CCSID set to ' *CAT &S_CCSID)         */
          /* SNDPGMMSG MSG('Inizio ad elaborare i singoli simboli')    */
             CALLPRC    PRC('Qp2dlsym') PARM((&ID *BYVAL) (&SYMB_01) (&CCSID  *BYVAL) (&SYMB_P)) RTNVAL(&RT_P)
             IF         COND(&RT_P *EQ *NULL)  THEN(DO)
             CALLPRC    PRC('Qp2dlerror') RTNVAL(&ERR_P)
             IF         COND(&ERR_P *NE *NULL) THEN(DO)
             SNDPGMMSG  MSG(&MSG)
             GOTO       CMDLBL(CLOSE)
             ENDDO
             ENDDO
             CHGVAR     VAR(&FUNCTION1) VALUE(&RT)
          /* SNDPGMMSG MSG(&SYMB_01) */
             CALLPRC    PRC('Qp2dlsym') PARM((&ID *BYVAL) (&SYMB_02) (&CCSID  *BYVAL) (&SYMB_P)) RTNVAL(&RT_P)
             CALLPRC    PRC('Qp2dlerror') RTNVAL(&ERR_P)
             IF         COND(&ERR_P *NE *NULL) THEN(DO)
             SNDPGMMSG  MSG(&MSG)
             GOTO       CMDLBL(CLOSE)
             ENDDO
             CHGVAR     VAR(&FUNCTION2) VALUE(&RT)
          /* SNDPGMMSG MSG(&SYMB_02) */
             CALLPRC    PRC('Qp2dlsym') PARM((&ID *BYVAL) (&SYMB_03) (&CCSID  *BYVAL) (&SYMB_P)) RTNVAL(&RT_P)
             CALLPRC    PRC('Qp2dlerror') RTNVAL(&ERR_P)
             IF         COND(&ERR_P *NE *NULL) THEN(DO)
             SNDPGMMSG  MSG(&MSG)
             GOTO       CMDLBL(CLOSE)
             ENDDO
             CHGVAR     VAR(&FUNCTION3) VALUE(&RT)
          /* SNDPGMMSG MSG(&SYMB_03) */
             CALLPRC    PRC('Qp2dlsym') PARM((&ID *BYVAL) (&SYMB_04) (&CCSID  *BYVAL) (&SYMB_P)) RTNVAL(&RT_P)
             CALLPRC    PRC('Qp2dlerror') RTNVAL(&ERR_P)
             IF         COND(&ERR_P *NE *NULL) THEN(DO)
             SNDPGMMSG  MSG(&MSG)
             GOTO       CMDLBL(CLOSE)
             ENDDO
             CHGVAR     VAR(&FUNCTION4) VALUE(&RT)
          /* SNDPGMMSG MSG(&SYMB_04) */
             CALLPRC    PRC('Qp2dlsym') PARM((&ID *BYVAL) (&SYMB_05) (&CCSID  *BYVAL) (&SYMB_P)) RTNVAL(&RT_P)
             CALLPRC    PRC('Qp2dlerror') RTNVAL(&ERR_P)
             IF         COND(&ERR_P *NE *NULL) THEN(DO)
             SNDPGMMSG  MSG(&MSG)
             GOTO       CMDLBL(CLOSE)
             ENDDO
             CHGVAR     VAR(&FUNCTION5) VALUE(&RT)
          /* SNDPGMMSG MSG(&SYMB_05) */
             CALLPRC    PRC('Qp2dlsym') PARM((&ID *BYVAL) (&SYMB_08) (&CCSID  *BYVAL) (&SYMB_P)) RTNVAL(&RT_P)
             CALLPRC    PRC('Qp2dlerror') RTNVAL(&ERR_P)
             IF         COND(&ERR_P *NE *NULL) THEN(DO)
             SNDPGMMSG  MSG(&MSG)
             GOTO       CMDLBL(CLOSE)
             ENDDO
             CHGVAR     VAR(&FUNCTION8) VALUE(&RT)
          /* SNDPGMMSG MSG(&SYMB_08) */

             CHGVAR     VAR(&FLAGS) VALUE(2)
             CHGVAR     VAR(&PATH2) VALUE(&ROOT *TCAT '/lib/libhelp.so' *TCAT &NL)

             CALLPRC    PRC('Qp2dlopen') PARM( +
                          (&PATH2)             +
                          (&FLAGS *BYVAL)      +
                          (&CCSID *BYVAL)      +
                        ) RTNVAL(&IDC)

             CALLPRC    PRC('Qp2dlerror') RTNVAL(&ERR_P)

             IF         COND(&ERR_P *NE *NULL) THEN(DO)
             SNDPGMMSG  MSG(&MSG)
             GOTO       CMDLBL(END)
             ENDDO


          /* SNDPGMMSG  MSG('Prepare and execute Qp2dlsym') */
             /* Prepare and execute Qp2dlsym                    */
             CALLPRC    PRC('Qp2dlsym') PARM((&IDC *BYVAL) (&SYMB_06) (&CCSID  *BYVAL) (&SYMB_P)) RTNVAL(&RT_P)
             CALLPRC    PRC('Qp2dlerror') RTNVAL(&ERR_P)
             IF         COND(&ERR_P *NE *NULL) THEN(DO)
             SNDPGMMSG  MSG(&MSG)
             GOTO       CMDLBL(CLOSE)
             ENDDO
             CHGVAR     VAR(&FUNCTION6) VALUE(&RT)
          /* SNDPGMMSG MSG(&SYMB_06) */
             CALLPRC    PRC('Qp2dlsym') PARM((&IDC *BYVAL) (&SYMB_07) (&CCSID  *BYVAL) (&SYMB_P)) RTNVAL(&RT_P)
             CALLPRC    PRC('Qp2dlerror') RTNVAL(&ERR_P)
             IF         COND(&ERR_P *NE *NULL) THEN(DO)
             SNDPGMMSG  MSG(&MSG)
             GOTO       CMDLBL(CLOSE)
             ENDDO
             CHGVAR     VAR(&FUNCTION7) VALUE(&RT)
          /* SNDPGMMSG MSG(&SYMB_07) */
             RETURN
END:
CLOSE:
FINE:        ENDPGM
