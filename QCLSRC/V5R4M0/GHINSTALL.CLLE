             PGM        PARM(&PASE_DIR &GIT_USER &PACKAGEN &GITTOKEN &TGTLIB &DEVOPT &TGTRLS &OMISSIBLE)
             COPYRIGHT  TEXT('Andrea Ribuoli Â© 2023 - PASERIE Installer')
             DCL        VAR(&PASE_DIR)  TYPE(*CHAR) LEN(60)
             DCL        VAR(&GIT_USER)  TYPE(*CHAR) LEN(30)
             DCL        VAR(&PACKAGEN)  TYPE(*CHAR) LEN(10)
             DCL        VAR(&GITTOKEN)  TYPE(*CHAR) LEN(40)
             DCL        VAR(&TGTLIB)    TYPE(*CHAR) LEN(10)
             DCL        VAR(&GIT_USER2) TYPE(*CHAR) LEN(30)
             DCL        VAR(&PACKAGEN2) TYPE(*CHAR) LEN(10)
             DCL        VAR(&DEVOPT)    TYPE(*CHAR) LEN(1)
             DCL        VAR(&TGTRLS)    TYPE(*CHAR) LEN(10)
             DCL        VAR(&OMISSIBLE) TYPE(*CHAR) LEN(1)
             DCL        VAR(&VERBOSE) TYPE(*CHAR) LEN(1)
             DCL        VAR(&ERROR) TYPE(*INT) LEN(4)
             DCL        VAR(&PTRSAREA) TYPE(*CHAR) LEN(160) VALUE(*BLANK)
             DCL        VAR(&ROOT)     TYPE(*CHAR) STG(*DEFINED) LEN(60) DEFVAR(&PTRSAREA 81)
             DCL        VAR(&CERT)     TYPE(*CHAR) STG(*DEFINED) LEN(20) DEFVAR(&PTRSAREA 141)
             DCL        VAR(&FUNCS_PTR) TYPE(*PTR) ADDRESS(&PTRSAREA)
             DCL        VAR(&TMP_LIBN) TYPE(*CHAR) LEN(10)
             DCL        VAR(&TMP_FILN) TYPE(*CHAR) LEN(10)
             DCL        VAR(&COUNT) TYPE(*INT) LEN(2) VALUE(0)
             DCL        VAR(&TOTCNT) TYPE(*INT) LEN(2) VALUE(0)
             DCL        VAR(&PKG_BLCK) TYPE(*CHAR) LEN(27300)
             DCL        VAR(&CURPOS) TYPE(*INT) VALUE(1)
             DCL        VAR(&PKG_LPTR) TYPE(*PTR)
             DCL        VAR(&PKG_LINE) TYPE(*CHAR) STG(*BASED) LEN(91)  BASPTR(&PKG_LPTR)
             DCL        VAR(&PKG_FILN) TYPE(*CHAR) STG(*DEFINED) LEN(10) DEFVAR(&PKG_LINE 1)
             DCL        VAR(&PKG_MBRN) TYPE(*CHAR) STG(*DEFINED) LEN(10) DEFVAR(&PKG_LINE 11)
             DCL        VAR(&PKG_EXTN) TYPE(*CHAR) STG(*DEFINED) LEN(10) DEFVAR(&PKG_LINE 21)
             DCL        VAR(&PKG_TEXT) TYPE(*CHAR) STG(*DEFINED) LEN(50) DEFVAR(&PKG_LINE 31)
             DCL        VAR(&URLI) TYPE(*CHAR) LEN(99)
             DCL        VAR(&URL) TYPE(*CHAR) LEN(100)
             DCL        VAR(&URL_P) TYPE(*PTR)
             DCL        VAR(&CAINFO) TYPE(*CHAR) LEN(80)
             DCL        VAR(&CAINFO_P) TYPE(*PTR) 
             DCL        VAR(&AGENT) TYPE(*CHAR) LEN(20)
             DCL        VAR(&AGENT_P) TYPE(*PTR)
             DCL        VAR(&AUTI) TYPE(*CHAR) LEN(61) VALUE('Authorization: token ')
             DCL        VAR(&AUT) TYPE(*CHAR) LEN(62)
             DCL        VAR(&AUT_P) TYPE(*PTR) 
             DCL        VAR(&HDRI) TYPE(*CHAR) LEN(37) VALUE('Accept: application/vnd.github.v3.raw')
             DCL        VAR(&HDR) TYPE(*CHAR) LEN(38)
             DCL        VAR(&HDR_P) TYPE(*PTR) 
             DCL        VAR(&IN_BYTES) TYPE(*UINT) LEN(4)
             DCL        VAR(&PRE_BYTES) TYPE(*UINT) LEN(4)
             DCL        VAR(&OUT_BYTES) TYPE(*UINT) LEN(4)
             DCL        VAR(&SPOS) TYPE(*UINT) LEN(4)
             DCL        VAR(&EPOS) TYPE(*UINT) LEN(4)
             DCL        VAR(&NPOS) TYPE(*UINT) LEN(4)
             DCL        VAR(&ZPOS) TYPE(*UINT) LEN(4)
             DCL        VAR(&RPOS) TYPE(*UINT) LEN(4)
             DCL        VAR(&LEN) TYPE(*UINT) LEN(4)
             DCL        VAR(&CONVD) TYPE(*CHAR) LEN(52)
             DCL        VAR(&RC) TYPE(*INT)
             DCL        VAR(&CDRC) TYPE(*INT) STG(*DEFINED) DEFVAR(&CONVD)
             DCL        VAR(&F_CODE) TYPE(*CHAR) LEN(32) +
                          VALUE(X'0000000000000000000000000000000000000000000000000000000000000000')
             DCL        VAR(&T_CODE) TYPE(*CHAR) LEN(32) +
                          VALUE(X'000004B800000000000000000000000000000000000000000000000000000000')
             DCL        VAR(&CONVB) TYPE(*CHAR) LEN(52)
             DCL        VAR(&RCB) TYPE(*INT)
             DCL        VAR(&CDRCB) TYPE(*INT) STG(*DEFINED) DEFVAR(&CONVB)
             DCL        VAR(&F_CODEB) TYPE(*CHAR) LEN(32) +
                          VALUE(X'000004B800000000000000000000000000000000000000000000000000000000')
             DCL        VAR(&T_CODEB) TYPE(*CHAR) LEN(32) +
                          VALUE(X'0000000000000000000000000000000000000000000000000000000000000000')
             DCL        VAR(&NL) TYPE(*CHAR) LEN(1) VALUE(X'00')
             DCL        VAR(&OA) TYPE(*CHAR) LEN(1) VALUE(X'0A')
             DCL        VAR(&R_D) TYPE(*INT)
             DCL        VAR(&PATH)    TYPE(*CHAR)  LEN(50)
             DCL        VAR(&SYNM_P)  TYPE(*PTR)   
             DCL        VAR(&SYDT_P)  TYPE(*PTR)  
             DCL        VAR(&SYDT_L)  TYPE(*UINT)  VALUE(0)
             DCL        VAR(&P_CCSID) TYPE(*INT)   VALUE(1208)
             DCL        VAR(&ARGV_P)  TYPE(*PTR)   ADDRESS(&PATH)
             DCL        VAR(&ENV)     TYPE(*PTR)  
             DCL        VAR(&ENV_P)   TYPE(*PTR)   ADDRESS(&ENV)
             DCL        VAR(&PSIZE)   TYPE(*INT)   VALUE(0)
             DCL        VAR(&S_CCSID) TYPE(*CHAR)  LEN(5)
             DCL        VAR(&PATH2)   TYPE(*CHAR)  LEN(70)
             DCL        VAR(&FLAGS)   TYPE(*INT)   VALUE(2)
             DCL        VAR(&CCSID)   TYPE(*INT)   VALUE(0)
             DCL        VAR(&ID) TYPE(*INT) LEN(8) VALUE(-1)  /* RTLD_DEFAULT */
             DCL        VAR(&IDC) TYPE(*INT) LEN(8) VALUE(-1) /* RTLD_DEFAULT */
             DCL        VAR(&NAME)    TYPE(*CHAR)  LEN(30)
             DCL        VAR(&SYMB_P)  TYPE(*PTR)  
             DCL        VAR(&RT0_P)   TYPE(*PTR)   
             DCL        VAR(&RT0) TYPE(*INT) STG(*BASED) LEN(8) BASPTR(&RT0_P)
             DCL        VAR(&RT_P)    TYPE(*PTR)   
             DCL        VAR(&RT) TYPE(*INT) STG(*BASED) LEN(8) BASPTR(&RT_P)
             DCL        VAR(&RT1_P)   TYPE(*PTR)   
             DCL        VAR(&RT1) TYPE(*INT) STG(*BASED) LEN(8) BASPTR(&RT1_P)
             DCL        VAR(&RT2_P)   TYPE(*PTR)  
             DCL        VAR(&RT2) TYPE(*INT) STG(*BASED) LEN(8) BASPTR(&RT2_P)
             DCL        VAR(&RT3_P)   TYPE(*PTR)  
             DCL        VAR(&RT3) TYPE(*INT) STG(*BASED) LEN(8) BASPTR(&RT3_P)
             DCL        VAR(&RT4_P)   TYPE(*PTR)   
             DCL        VAR(&RT4) TYPE(*INT) STG(*BASED) LEN(8) BASPTR(&RT4_P)
             DCL        VAR(&MEMF_P)   TYPE(*PTR)  
             DCL        VAR(&SIZEF)    TYPE(*UINT)   LEN(8) VALUE(32)
             DCL        VAR(&LOCAF)    TYPE(*UINT)   LEN(8)
             DCL        VAR(&MEMF) TYPE(*CHAR) STG(*BASED) LEN(32) BASPTR(&MEMF_P)
             DCL        VAR(&INFOPT) TYPE(*INT) STG(*DEFINED) LEN(8) DEFVAR(&MEMF 1)
             DCL        VAR(&INFOSZ) TYPE(*INT) STG(*DEFINED) LEN(8) DEFVAR(&MEMF 9)
             DCL        VAR(&NATIVF) TYPE(*PTR) STG(*DEFINED)        DEFVAR(&MEMF 17)
             DCL        VAR(&INFOPU) TYPE(*PTR)
             DCL        VAR(&INFOVE) TYPE(*CHAR) STG(*BASED) LEN(64) BASPTR(&INFOPU)
             DCL        VAR(&MAJOR)  TYPE(*CHAR) STG(*DEFINED) LEN(1) DEFVAR(&INFOVE 10)
             DCL        VAR(&MINOR)  TYPE(*CHAR) STG(*DEFINED) LEN(1) DEFVAR(&INFOVE 11)
             DCL        VAR(&PATCH)  TYPE(*CHAR) STG(*DEFINED) LEN(1) DEFVAR(&INFOVE 12)
             DCL        VAR(&MEM_P)   TYPE(*PTR)   
             DCL        VAR(&SIZE)    TYPE(*UINT)   LEN(8) VALUE(100)
             DCL        VAR(&LOCA)    TYPE(*UINT)   LEN(8)
             DCL        VAR(&MEM) TYPE(*CHAR) STG(*BASED) LEN(100) BASPTR(&MEM_P)
             DCL        VAR(&MEMA_P)   TYPE(*PTR)  
             DCL        VAR(&SIZEA)    TYPE(*UINT)   LEN(8) VALUE(20)
             DCL        VAR(&LOCAA)    TYPE(*UINT)   LEN(8)
             DCL    VAR(&MEMA) TYPE(*CHAR) STG(*BASED) LEN(100) BASPTR(&MEMA_P)
             DCL        VAR(&LOCAC)    TYPE(*UINT)   LEN(8)
             DCL        VAR(&MEMD_P)   TYPE(*PTR)   
             DCL        VAR(&MEMD_P2)  TYPE(*PTR)   
             DCL        VAR(&SIZED)    TYPE(*UINT)   LEN(8) VALUE(80)
             DCL        VAR(&LOCAD)    TYPE(*UINT)   LEN(8)
             DCL      VAR(&MEMD) TYPE(*CHAR) STG(*BASED) LEN(80) BASPTR(&MEMD_P)
             /* */
             DCL        VAR(&MEMG_P)   TYPE(*PTR)   
             DCL        VAR(&MEMG_P2)  TYPE(*PTR)   
             DCL        VAR(&SIZEG)    TYPE(*UINT)   LEN(8) VALUE(80)
             DCL        VAR(&LOCAG)    TYPE(*UINT)   LEN(8)
             DCL      VAR(&MEMG) TYPE(*CHAR) STG(*BASED) LEN(80) BASPTR(&MEMG_P)
             /* */
             DCL        VAR(&MEME_P)   TYPE(*PTR)   
             DCL        VAR(&MEME_P2)  TYPE(*PTR)  
             DCL        VAR(&SIZEE)    TYPE(*UINT)   LEN(8) VALUE(80)
             DCL        VAR(&LOCAE)    TYPE(*UINT)   LEN(8)
             DCL      VAR(&MEME) TYPE(*CHAR) STG(*BASED) LEN(80) BASPTR(&MEME_P)
             DCL        VAR(&MEMB_P)   TYPE(*PTR)   
             DCL        VAR(&SIZEB)    TYPE(*UINT)   LEN(8) VALUE(32)
             DCL        VAR(&LOCAB)    TYPE(*UINT)   LEN(8)
             DCL        VAR(&MEMB) TYPE(*CHAR) STG(*BASED) LEN(32) BASPTR(&MEMB_P)
             DCL        VAR(&HTMLPT) TYPE(*INT) STG(*DEFINED) LEN(8) DEFVAR(&MEMB)
             DCL        VAR(&HTMLSZ) TYPE(*INT) STG(*DEFINED) LEN(8) DEFVAR(&MEMB 9)
             DCL        VAR(&NATIVE) TYPE(*CHAR) STG(*DEFINED) LEN(16) DEFVAR(&MEMB 17)
             DCL        VAR(&BFP) TYPE(*CHAR) LEN(16)
             DCL        VAR(&NATIVP) TYPE(*PTR) STG(*DEFINED) DEFVAR(&BFP)
             DCL        VAR(&CURR_P) TYPE(*PTR) 
             DCL        VAR(&CLOSING_P) TYPE(*PTR)
             DCL        VAR(&CLOSING) TYPE(*CHAR) STG(*BASED) LEN(20) BASPTR(&CLOSING_P)
             DCL        VAR(&MAXRECLEN) TYPE(*INT) LEN(4) VALUE(32767)
             DCL        VAR(&HTML_E) TYPE(*CHAR) LEN(32767)
             DCL        VAR(&HTML_P) TYPE(*PTR) ADDRESS(&HTML_E)
             DCL        VAR(&HTML) TYPE(*CHAR) STG(*BASED) LEN(32767) BASPTR(&NATIVP)
             DCL        VAR(&OPT_CD) TYPE(*INT)  LEN(4)
             DCL        VAR(&ERR_P) TYPE(*PTR) 
             DCL        VAR(&MSG) TYPE(*CHAR) STG(*BASED) LEN(300) BASPTR(&ERR_P)
             DCL      VAR(&O_RDONLY)   TYPE(*INT) LEN(4) VALUE(  1) /* 00001 */
             DCL      VAR(&O_WRONLY)   TYPE(*INT) LEN(4) VALUE(  2) /* 00002 */
             DCL      VAR(&O_RDWR)     TYPE(*INT) LEN(4) VALUE(  4) /* 00004 */
             DCL      VAR(&O_CREAT)    TYPE(*INT) LEN(4) VALUE(  8) /* 00010 */
             DCL      VAR(&O_EXCL)     TYPE(*INT) LEN(4) VALUE( 16) /* 00020 */
             DCL      VAR(&O_TRUNC)    TYPE(*INT) LEN(4) VALUE( 64) /* 00100 */
             DCL      VAR(&O_NONBLOCK) TYPE(*INT) LEN(4) VALUE(128) /* 00200 */
             DCL      VAR(&O_APPEND)   TYPE(*INT) LEN(4) VALUE(256) /* 00400 */
             DCL      VAR(&O_SYNC)     TYPE(*INT) LEN(4) VALUE(1024)
                                                             /* 000000002000 */
             DCL      VAR(&O_TEXTDATA) TYPE(*INT) LEN(4) VALUE(16777216)
                                                             /* 000100000000 */
             DCL        VAR(&LINEFEED)   TYPE(*CHAR) LEN(1) VALUE(X'25')
             DCL        VAR(&FILEPATH) TYPE(*CHAR) LEN(80)
             DCL        VAR(&OFLAG)      TYPE(*INT)  LEN(4)
             DCL        VAR(&MODE)       TYPE(*INT)  LEN(4) VALUE(7)
             DCL        VAR(&CONV_ID)    TYPE(*UINT) LEN(4) VALUE(0)
             DCL        VAR(&TX_CONV_ID) TYPE(*UINT) LEN(4) VALUE(0)
             DCL        VAR(&FD)         TYPE(*INT)  LEN(4)
             DCL        VAR(&RTCD)       TYPE(*INT)  LEN(4)
             DCL        VAR(&VERS_P)     TYPE(*INT)  LEN(4)
             DCL        VAR(&CBCK)       TYPE(*INT) LEN(8)
             DCL        VAR(&CURL)       TYPE(*INT) LEN(8)
             DCL        VAR(&ONVALUE)    TYPE(*INT)  LEN(8) VALUE(1)
             DCL        VAR(&FREE_PTR) TYPE(*PTR)
             DCL        VAR(&RET_LEN)  TYPE(*CHAR) STG(*BASED) LEN(8) BASPTR(&FREE_PTR)
             DCL        VAR(&TOTAL_LEN)  TYPE(*UINT) STG(*DEFINED) LEN(4) DEFVAR(&RET_LEN 5)
             DCL        VAR(&BODY_LEN) TYPE(*UINT)  LEN(4)
             DCL        VAR(&CURL_VRM) TYPE(*CHAR) LEN(6)
             DCL        VAR(&MAHIGHB) TYPE(*CHAR) STG(*DEFINED) LEN(1) DEFVAR(&CURL_VRM)
             DCL        VAR(&MALOWBY) TYPE(*CHAR) STG(*DEFINED) LEN(1) DEFVAR(&CURL_VRM 2)
             DCL        VAR(&MIHIGHB) TYPE(*CHAR) STG(*DEFINED) LEN(1) DEFVAR(&CURL_VRM 3)
             DCL        VAR(&MILOWBY) TYPE(*CHAR) STG(*DEFINED) LEN(1) DEFVAR(&CURL_VRM 4)
             DCL        VAR(&PAHIGHB) TYPE(*CHAR) STG(*DEFINED) LEN(1) DEFVAR(&CURL_VRM 5)
             DCL        VAR(&PALOWBY) TYPE(*CHAR) STG(*DEFINED) LEN(1) DEFVAR(&CURL_VRM 6)
             DCL        VAR(&MAJORI) TYPE(*INT)  STG(*DEFINED) LEN(2) DEFVAR(&CURL_VRM)
             DCL        VAR(&MINORI) TYPE(*INT)  STG(*DEFINED) LEN(2) DEFVAR(&CURL_VRM 3)
             DCL        VAR(&PATCHI) TYPE(*INT)  STG(*DEFINED) LEN(2) DEFVAR(&CURL_VRM 5)
             DCL        VAR(&MAJORA) TYPE(*CHAR) LEN(4)
             DCL        VAR(&MINORA) TYPE(*CHAR) LEN(4)
             DCL        VAR(&PATCHA) TYPE(*CHAR) LEN(4)
             DCL        VAR(&MSGDTA) TYPE(*CHAR) LEN(128)
             DCL        VAR(&CURSRCROW) TYPE(*CHAR) LEN(132)
             DCL        VAR(&SPOOL)  TYPE(*CHAR) LEN(6) VALUE(*NONE)
             DCL        VAR(&LOGCLPGM) TYPE(*CHAR) LEN(5) VALUE(*SAME)
             DCL        VAR(&LOG)      TYPE(*CHAR) LEN(7) VALUE(*SAME)
             DCL        VAR(&X15) TYPE(*CHAR) LEN(1) VALUE(X'15')
             DCL        VAR(&EXTRACT)  TYPE(*DEC)   LEN(5 0)
             DCL        VAR(&TMPPOS) TYPE(*UINT) LEN(4)
             DCL        VAR(&LANG_DIR) TYPE(*CHAR) LEN(5) VALUE('     ')
             DCL        VAR(&USELANGDIR) TYPE(*CHAR) LEN(5) VALUE('     ')
             DCL        VAR(&LANG_FC) TYPE(*CHAR) LEN(4)
             DCL        VAR(&OS_DIR) TYPE(*CHAR) LEN(7) VALUE('       ')
             DCL        VAR(&USEOSDIR) TYPE(*CHAR) LEN(7) VALUE('       ')
             DCL        VAR(&CUR_OSV) TYPE(*CHAR) LEN(6) VALUE('      ')
             DCL        VAR(&CUR_OSV_3) TYPE(*CHAR) LEN(3) VALUE('   ')
             DCL        VAR(&CUR_OSV_D) TYPE(*DEC) LEN(3 0) VALUE(0)
             DCL        VAR(&NULL)      TYPE(*PTR)
             CHGJOB     JOBMSGQFL(*WRAP)
             RTVDTAARA  DTAARA(QGPL/QSS1MRI (26 4)) RTNVAR(&LANG_FC)
             MONMSG     MSGID(CPF0000)
             RTVDTAARA  DTAARA(PASE_TEST (26 4)) RTNVAR(&LANG_FC)
             MONMSG     MSGID(CPF0000)
             RTVDTAARA  DTAARA(QGPL/QSS1MRI (1 6)) RTNVAR(&CUR_OSV)
             MONMSG     MSGID(CPF0000)
             RTVDTAARA  DTAARA(PASE_TEST (1 6)) RTNVAR(&CUR_OSV)
             MONMSG     MSGID(CPF0000)
             CHGVAR     VAR(&CUR_OSV_3) VALUE(%SST(&CUR_OSV 2 1) *CAT +
                                              %SST(&CUR_OSV 4 1) *CAT +
                                              %SST(&CUR_OSV 6 1))
             CHGVAR     VAR(&VERBOSE) VALUE(&OMISSIBLE)
             MONMSG     MSGID(MCH3601) EXEC(CHGVAR VAR(&VERBOSE) VALUE('N'))
             IF         COND(&DEVOPT = 'B') THEN(DO)
             CHGVAR     VAR(&SPOOL) VALUE(*PRINT)
             CHGVAR     VAR(&LOG) VALUE(*SECLVL)
             CHGVAR     VAR(&LOGCLPGM) VALUE(*YES)
             CHGVAR     VAR(&DEVOPT) VALUE('N')
             ENDDO
             CALLPRC    PRC('QtqIconvOpen') PARM((&T_CODE) (&F_CODE)) RTNVAL(&CONVD)
             IF         COND(&CDRC = -1) THEN(DO)
             SNDPGMMSG  MSG('Application error with iconv')
             GOTO       CMDLBL(FINE)
             ENDDO
             CALLPRC    PRC('QtqIconvOpen') PARM((&T_CODEB) (&F_CODEB)) RTNVAL(&CONVB)
             IF         COND(&CDRCB = -1) THEN(DO)
             SNDPGMMSG  MSG('Application error with iconv')
             GOTO       CMDLBL(FINE)
             ENDDO
             CHGVAR     VAR(&ROOT) VALUE(&PASE_DIR)
             CHGVAR     VAR(&CERT) VALUE('/certs/ca-certs.crt')
             CALLPRC    PRC('EASY_LOAD') PARM((&FUNCS_PTR))
             CHGVAR     VAR(&CAINFO) VALUE(&ROOT *TCAT &CERT *TCAT &NL)
             CHGVAR     VAR(&CAINFO_P) VALUE(%ADDRESS(&CAINFO))
             CALLPRC    PRC('Qp2malloc') PARM((&SIZEG *BYVAL) (&LOCAG) (*)) RTNVAL(&MEMG_P)
             CHGVAR     VAR(&IN_BYTES) VALUE(&SIZED)
             CHGVAR     VAR(&OUT_BYTES) VALUE(&SIZED)
             CHGVAR     VAR(&MEMG_P2) VALUE(&MEMG_P)
             CALLPRC    PRC('iconv') PARM((&CONVD *BYVAL) (&CAINFO_P) (&IN_BYTES) (&MEMG_P2) (&OUT_BYTES)) RTNVAL(&RC)

             CALLPRC    PRC('Qp2malloc') PARM((&SIZEF *BYVAL) (&LOCAF) (*)) RTNVAL(&MEMF_P)
             CALLPRC    PRC('VERS_INFO') PARM((&FUNCS_PTR) (&LOCAF))
             CHGVAR     VAR(&INFOPU) VALUE(&NATIVF)
             CHGVAR     VAR(&MAHIGHB) VALUE(X'00')
             CHGVAR     VAR(&MIHIGHB) VALUE(X'00')
             CHGVAR     VAR(&PAHIGHB) VALUE(X'00')
             CHGVAR     VAR(&MALOWBY) VALUE(&MAJOR)
             CHGVAR     VAR(&MILOWBY) VALUE(&MINOR)
             CHGVAR     VAR(&PALOWBY) VALUE(&PATCH)
             CHGVAR     VAR(&MAJORA) VALUE(&MAJORI)
             CHGVAR     VAR(&MINORA) VALUE(&MINORI)
             CHGVAR     VAR(&PATCHA) VALUE(&PATCHI)
             CHGVAR     VAR(&AGENT) VALUE('curl/' *CAT &MAJORA *TCAT '.' *CAT &MINORA *TCAT '.' *CAT &PATCHA)
             CHGVAR     VAR(&AGENT) VALUE(&AGENT *TCAT &NL)
             CHGVAR     VAR(&HDR) VALUE(&HDRI *TCAT &NL)
             CALLPRC    PRC('Qp2malloc') PARM((&SIZED *BYVAL) (&LOCAD) (*)) RTNVAL(&MEMD_P)
             CHGVAR     VAR(&HDR_P) VALUE(%ADDRESS(&HDR))
             CHGVAR     VAR(&IN_BYTES) VALUE(&SIZED)
             CHGVAR     VAR(&OUT_BYTES) VALUE(&SIZED)
             CHGVAR     VAR(&MEMD_P2) VALUE(&MEMD_P)
             CALLPRC    PRC('iconv') PARM((&CONVD *BYVAL) (&HDR_P) (&IN_BYTES) (&MEMD_P2) (&OUT_BYTES)) RTNVAL(&RC)
             CHGVAR     VAR(&AUT) VALUE(&AUTI *TCAT ' ' *CAT &GITTOKEN *CAT &NL)
             CALLPRC    PRC('Qp2malloc') PARM((&SIZEE *BYVAL) (&LOCAE) (*)) RTNVAL(&MEME_P)
             CHGVAR     VAR(&AUT_P) VALUE(%ADDRESS(&AUT))
             CHGVAR     VAR(&IN_BYTES) VALUE(&SIZEE)
             CHGVAR     VAR(&OUT_BYTES) VALUE(&SIZEE)
             CHGVAR     VAR(&MEME_P2) VALUE(&MEME_P)
             CALLPRC    PRC('iconv') PARM((&CONVD *BYVAL) (&AUT_P) (&IN_BYTES) (&MEME_P2) (&OUT_BYTES)) RTNVAL(&RC)
             CHGVAR     VAR(&LOCAC) VALUE(0)
             CALLPRC    PRC('SLIST_APPE') PARM((&FUNCS_PTR) (&LOCAC) (&LOCAD))
             CALLPRC    PRC('SLIST_APPE') PARM((&FUNCS_PTR) (&LOCAC) (&LOCAE))
             CHGVAR     VAR(&PKG_LPTR) VALUE(%ADDRESS(&PKG_BLCK))
             CALLPRC    PRC('Qp2malloc') PARM((&SIZEB *BYVAL) (&LOCAB) (*)) RTNVAL(&MEMB_P)
             CALLPRC    PRC('CALL_BACK') PARM((&FUNCS_PTR) (&LOCAB) (&CBCK))
             CALLPRC    PRC('EASY_INIT') PARM((&FUNCS_PTR) (&CURL))
             CHGVAR     VAR(&OPT_CD) VALUE(10023) /* CURLOPT_HTTPHEADER */
             CALLPRC    PRC('EASY_SETOP') PARM((&FUNCS_PTR) (&CURL) (&OPT_CD) (&LOCAC) (&ERROR))
             CHGVAR     VAR(&OPT_CD) VALUE(10065) /* CURLOPT_CAINFO */
             CALLPRC    PRC('EASY_SETOP') PARM((&FUNCS_PTR) (&CURL) (&OPT_CD) (&LOCAG) (&ERROR))
             IF         COND(&VERBOSE *EQ 'Y') THEN(DO)
             CHGVAR     VAR(&OPT_CD)  VALUE(41)   /* CURLOPT_VERBOSE 41 */
             CALLPRC    PRC('EASY_SETOP') PARM((&FUNCS_PTR) (&CURL) (&OPT_CD) (&ONVALUE) (&ERROR))
             ENDDO
             CHGVAR     VAR(&OPT_CD)  VALUE(52)   /* CURLOPT_FOLLOWLOCATION */
             CALLPRC    PRC('EASY_SETOP') PARM((&FUNCS_PTR) (&CURL) (&OPT_CD) (&ONVALUE) (&ERROR))
             CHGVAR     VAR(&OPT_CD) VALUE(20011)  /* CURLOPT_WRITEFUNCTION */
             CALLPRC    PRC('EASY_SETOP') PARM((&FUNCS_PTR) (&CURL) (&OPT_CD) (&CBCK) (&ERROR))
             CHGVAR     VAR(&OPT_CD)  VALUE(10001) /* CURLOPT_WRITEDATA */
             CALLPRC    PRC('EASY_SETOP') PARM((&FUNCS_PTR) (&CURL) (&OPT_CD) (&LOCAB) (&ERROR))
             /* */
             CALLPRC    PRC('Qp2malloc') PARM((&SIZEA *BYVAL) (&LOCAA) (*)) RTNVAL(&MEMA_P)
             CHGVAR     VAR(&AGENT_P) VALUE(%ADDRESS(&AGENT))
             CHGVAR     VAR(&IN_BYTES) VALUE(&SIZEA)
             CHGVAR     VAR(&OUT_BYTES) VALUE(&SIZEA)
             CHGVAR     VAR(&FREE_PTR) VALUE(&MEMA_P)
             CALLPRC    PRC('iconv') PARM((&CONVD *BYVAL) (&AGENT_P) (&IN_BYTES) (&MEMA_P) (&OUT_BYTES)) RTNVAL(&RC)
             CHGVAR     VAR(&OPT_CD) VALUE(10018) /* CURLOPT_USERAGENT  */
             CALLPRC    PRC('EASY_SETOP') PARM((&FUNCS_PTR) (&CURL) (&OPT_CD) (&LOCAA) (&ERROR))
             CALLPRC    PRC('Qp2free') PARM((&FREE_PTR *BYVAL)) RTNVAL(&RTCD)
             /* */
             CALLPRC    PRC('Qp2malloc') PARM((&SIZE *BYVAL) (&LOCA) (*)) RTNVAL(&MEM_P)
             CHGVAR     VAR(&URLI) +
                          VALUE('https://api.github.com/repos/' +
                          *CAT &GIT_USER *TCAT '/' *CAT &PACKAGEN +
                          *TCAT '/contents/GUIDANCE.TXT')
             CHGVAR     VAR(&URL) VALUE(&URLI *TCAT &NL)
             CHGVAR     VAR(&URL_P) VALUE(%ADDRESS(&URL))
             CHGVAR     VAR(&IN_BYTES) VALUE(&SIZE)
             CHGVAR     VAR(&OUT_BYTES) VALUE(&SIZE)
             CHGVAR     VAR(&FREE_PTR) VALUE(&MEM_P)
             CALLPRC    PRC('iconv') PARM((&CONVD *BYVAL) (&URL_P) (&IN_BYTES) (&MEM_P) (&OUT_BYTES)) RTNVAL(&RC)
             CHGVAR     VAR(&OPT_CD) VALUE(10002) /* CURLOPT_URL  10002 */
             CALLPRC    PRC('EASY_SETOP') PARM((&FUNCS_PTR) (&CURL) (&OPT_CD) (&LOCA) (&ERROR))
             /* */
             CALLPRC    PRC('EASY_PERFO') PARM((&FUNCS_PTR) (&CURL) (&ERROR))
             IF         COND(&ERROR *NE 0) THEN(DO)
             SNDPGMMSG  MSG('La chiamata a libcurl ha dato errore.')
             GOTO       CMDLBL(FINE)
             ENDDO
             CHGVAR     VAR(&OPT_CD) VALUE(6291464) /* CURLINFO_SIZE_DOWNLOAD_T */
             CALLPRC    PRC('EASY_GINFO') PARM((&FUNCS_PTR) (&CURL) (&OPT_CD) (&LOCA) (&ERROR))
             CHGVAR     VAR(&BODY_LEN) VALUE(&TOTAL_LEN)
             /* DMPCLPGM */
             CALLPRC    PRC('Qp2free') PARM((&FREE_PTR *BYVAL)) RTNVAL(&RTCD)

             /* by copying &NATIVE char(16) into &BFP we are actually setting &NATIVEP pointer */
             CHGVAR     VAR(&BFP) VALUE(&NATIVE)
             CHGVAR     VAR(&CURR_P) VALUE(&NATIVP)
             CHGVAR     VAR(&EPOS) VALUE(0)
             CHGVAR     VAR(&OUT_BYTES) VALUE(&MAXRECLEN)
 NEXT:       IF         COND(%SST(&HTML 1 1) *EQ &NL) THEN(GOTO CMDLBL(SKIP))
             CHGVAR     VAR(&SPOS) VALUE(&EPOS + 1)
             CHGVAR     VAR(&EPOS) VALUE(%SCAN(&OA &HTML &SPOS))
             IF         COND(&EPOS *EQ 0) THEN(DO)
               IF         COND(&BODY_LEN *GT 0) THEN(DO)
             /*  DMPCLPGM */
                 CHGVAR     VAR(&IN_BYTES) VALUE(&BODY_LEN + 1)
                 CHGVAR     VAR(%SST(&HTML &IN_BYTES 1)) VALUE(X'0A')
                 CHGVAR     VAR(&BODY_LEN) VALUE(0)
                 GOTO       CMDLBL(RECOVER)
               ENDDO
               GOTO       CMDLBL(SKIP)
             ENDDO
             CHGVAR     VAR(&LEN) VALUE(&EPOS - &SPOS)
             CHGVAR     VAR(&IN_BYTES) VALUE(&LEN + 1)
             IF         COND(&BODY_LEN *LT &IN_BYTES) THEN(DO)
               CHGVAR     VAR(&IN_BYTES) VALUE(&BODY_LEN)
               CHGVAR     VAR(&BODY_LEN) VALUE(0)
             ENDDO
             ELSE DO
               CHGVAR     VAR(&BODY_LEN) VALUE(&BODY_LEN - &IN_BYTES)
             ENDDO
 RECOVER:    CHGVAR     VAR(&HTML_E) VALUE(' ')
             CHGVAR     VAR(&HTML_P) VALUE(%ADDRESS(&HTML_E))
             CALLPRC    PRC('iconv') PARM((&CONVB *BYVAL) (&CURR_P) (&IN_BYTES) (&HTML_P) (&OUT_BYTES)) RTNVAL(&RC)
             IF         COND(%SST(&HTML_E 1 1) *EQ &NL) THEN(GOTO CMDLBL(SKIP))
             IF         COND(%SST(&HTML_E 1 1) *EQ '{') THEN(DO)
               SNDPGMMSG  MSG('GUIDANCE.TXT non trovato')
               GOTO       CMDLBL(FINE)
             ENDDO
             CHGVAR     VAR(&RPOS) VALUE(%SCAN(&LINEFEED &HTML_E 1))
             IF         COND(&RPOS *EQ 0) THEN(DO)
               CHGVAR   VAR(&RPOS) VALUE(30)
             ENDDO
             ELSE DO
               CHGVAR   VAR(&RPOS) VALUE(&RPOS - 1)
             ENDDO
             IF COND(%SST(&HTML_E 1 10) *EQ '*PREREQ   ') THEN(DO)
               CHKOBJ OBJ(%SST(&HTML_E 11 10)) OBJTYPE(*LIB) AUT(*READ)
               MONMSG MSGID(CPF9801) EXEC(DO)
                 CHGVAR VAR(&TMPPOS) VALUE(&RPOS - 30)
                 CHGVAR VAR(&GIT_USER2) VALUE(%SST(&HTML_E 31 &TMPPOS))
                 CHGVAR VAR(&PACKAGEN2) VALUE(%SST(&HTML_E 11 10))
                 INSTALL REPO_OWNER(&GIT_USER2) REPOSITORY(&PACKAGEN2) YOURGITPAT(&GITTOKEN)
               ENDDO  
               GOTO       CMDLBL(NEXT)
             ENDDO
             IF COND(%SST(&HTML_E 1 10) *EQ '*LANGUAGE ') THEN(DO)
               IF COND(%SST(&HTML_E 11 4) *EQ &LANG_FC) THEN( +
                 CHGVAR VAR(&LANG_DIR) VALUE('/' *CAT &LANG_FC))
               GOTO       CMDLBL(NEXT)
             ENDDO                                                  
             IF COND(%SST(&HTML_E 1 10) *EQ '*OSRELEASE') THEN(DO)
               IF COND(%SST(&HTML_E 11 6) *EQ &CUR_OSV) THEN( +
                 CHGVAR VAR(&OS_DIR) VALUE('/' *CAT &CUR_OSV))
               GOTO       CMDLBL(NEXT)
             ENDDO                                                  
             IF COND(%SST(&HTML_E 1 1) *EQ '*') THEN(DO)
               GOTO       CMDLBL(NEXT)
             ENDDO
             CHGVAR     VAR(%SST(&PKG_BLCK &CURPOS 90)) VALUE(%SST(&HTML_E 1 &RPOS))
             CHGVAR     VAR(&CURPOS) VALUE(&CURPOS + 91)
             CHGVAR     VAR(&TOTCNT) VALUE(&TOTCNT + 1)
             CHGVAR     VAR(&TMP_FILN) VALUE(%SST(&HTML_E 1 10))
             CRTSRCPF   FILE(QTEMP/&TMP_FILN) RCDLEN(132)
             MONMSG     MSGID(CPF0000)
             CHGVAR     VAR(&EPOS) VALUE(0)
             CHGVAR     VAR(&NATIVP) VALUE(&CURR_P)
             GOTO       CMDLBL(NEXT)
SKIP:
             CALLPRC    PRC('EASY_CLEAN') PARM((&FUNCS_PTR) (&CURL))
REPEAT_I:
             CALLPRC    PRC('Qp2malloc') PARM((&SIZEB *BYVAL) (&LOCAB) (*)) RTNVAL(&MEMB_P)
             CALLPRC    PRC('CALL_BACK') PARM((&FUNCS_PTR) (&LOCAB) (&CBCK))
             CALLPRC    PRC('EASY_INIT') PARM((&FUNCS_PTR) (&CURL))
             CHGVAR     VAR(&OPT_CD) VALUE(10023) /* CURLOPT_HTTPHEADER */
             CALLPRC    PRC('EASY_SETOP') PARM((&FUNCS_PTR) (&CURL) (&OPT_CD) (&LOCAC) (&ERROR))
             CHGVAR     VAR(&OPT_CD) VALUE(10065) /* CURLOPT_CAINFO */
             CALLPRC    PRC('EASY_SETOP') PARM((&FUNCS_PTR) (&CURL) (&OPT_CD) (&LOCAG) (&ERROR))
             IF         COND(&VERBOSE *EQ 'Y') THEN(DO)
             CHGVAR     VAR(&OPT_CD)  VALUE(41)   /* CURLOPT_VERBOSE 41 */
             CALLPRC    PRC('EASY_SETOP') PARM((&FUNCS_PTR) (&CURL) (&OPT_CD) (&ONVALUE) (&ERROR))
             ENDDO
             CHGVAR     VAR(&OPT_CD)  VALUE(52)   /* CURLOPT_FOLLOWLOCATION */
             CALLPRC    PRC('EASY_SETOP') PARM((&FUNCS_PTR) (&CURL) (&OPT_CD) (&ONVALUE) (&ERROR))
             CHGVAR     VAR(&OPT_CD) VALUE(20011)  /* CURLOPT_WRITEFUNCTION */
             CALLPRC    PRC('EASY_SETOP') PARM((&FUNCS_PTR) (&CURL) (&OPT_CD) (&CBCK) (&ERROR))
             CHGVAR     VAR(&OPT_CD)  VALUE(10001) /* CURLOPT_WRITEDATA */
             CALLPRC    PRC('EASY_SETOP') PARM((&FUNCS_PTR) (&CURL) (&OPT_CD) (&LOCAB) (&ERROR))
             CALLPRC    PRC('Qp2malloc') PARM((&SIZEA *BYVAL) (&LOCAA) (*)) RTNVAL(&MEMA_P)
             CHGVAR     VAR(&AGENT_P) VALUE(%ADDRESS(&AGENT))
             CHGVAR     VAR(&IN_BYTES) VALUE(&SIZEA)
             CHGVAR     VAR(&OUT_BYTES) VALUE(&SIZEA)
             CALLPRC    PRC('iconv') PARM((&CONVD *BYVAL) (&AGENT_P) (&IN_BYTES) (&MEMA_P) (&OUT_BYTES)) RTNVAL(&RC)
             CHGVAR     VAR(&OPT_CD) VALUE(10018) /* CURLOPT_USERAGENT  */
             CALLPRC    PRC('EASY_SETOP') PARM((&FUNCS_PTR) (&CURL) (&OPT_CD) (&LOCAA) (&ERROR))
             /* similar to the logic used with GUIDANCE.TXT file */
             CALLPRC    PRC('Qp2malloc') PARM((&SIZE *BYVAL) (&LOCA) (*)) RTNVAL(&MEM_P)
             CHGVAR     VAR(&FILEPATH) VALUE('/QSYS.LIB/QTEMP.LIB/' *CAT &PKG_FILN +
                          *TCAT '.FILE/' *CAT &PKG_MBRN *TCAT '.MBR')
             IF  COND((&LANG_DIR *NE '     ') *AND (&PKG_FILN *EQ 'QCMDSRC   ')) THEN( +
                  CHGVAR VAR(&USELANGDIR) VALUE(&LANG_DIR))
             IF  COND((&OS_DIR *NE '       ') *AND (&PKG_FILN *EQ 'QCLSRC   ')) THEN( +
                  CHGVAR VAR(&USEOSDIR) VALUE(&OS_DIR))
             CHGVAR     VAR(&URLI) +
                          VALUE('https://api.github.com/repos/' +
                          *CAT &GIT_USER *TCAT '/' *CAT &PACKAGEN +
                          *TCAT '/contents/' *CAT &PKG_FILN  *TCAT &USEOSDIR *TCAT &USELANGDIR +
                          *TCAT '/' *CAT &PKG_MBRN *TCAT '.' *CAT &PKG_EXTN)
             IF   COND(&USELANGDIR *NE '     ') THEN(CHGVAR VAR(&USELANGDIR) VALUE('     '))
             IF   COND(&USEOSDIR *NE '       ') THEN(CHGVAR VAR(&USEOSDIR) VALUE('       '))
             CHGVAR     VAR(&URL) VALUE(&URLI *TCAT &NL)
             CHGVAR     VAR(&URL_P) VALUE(%ADDRESS(&URL))
             CHGVAR     VAR(&IN_BYTES) VALUE(&SIZE)
             CHGVAR     VAR(&OUT_BYTES) VALUE(&SIZE)
             CHGVAR     VAR(&FREE_PTR) VALUE(&MEM_P)
             CALLPRC    PRC('iconv') PARM((&CONVD *BYVAL) (&URL_P) (&IN_BYTES) (&MEM_P) (&OUT_BYTES)) RTNVAL(&RC)
             CHGVAR     VAR(&OPT_CD) VALUE(10002) /* CURLOPT_URL  10002 */
             CALLPRC    PRC('EASY_SETOP') PARM((&FUNCS_PTR) (&CURL) (&OPT_CD) (&LOCA) (&ERROR))
             /* */
             CALLPRC    PRC('EASY_PERFO') PARM((&FUNCS_PTR) (&CURL) (&ERROR))
             IF         COND(&ERROR *NE 0) THEN(DO)
             SNDPGMMSG MSG('La chiamata a libcurl ha dato errore.')
             GOTO       CMDLBL(FINE)
             ENDDO
             CHGVAR     VAR(&OPT_CD) VALUE(6291464) /* CURLINFO_SIZE_DOWNLOAD_T */
             CALLPRC    PRC('EASY_GINFO') PARM((&FUNCS_PTR) (&CURL) (&OPT_CD) (&LOCA) (&ERROR))
             CHGVAR     VAR(&BODY_LEN) VALUE(&TOTAL_LEN)
             CALLPRC    PRC('Qp2free') PARM((&FREE_PTR *BYVAL)) RTNVAL(&RTCD)

             CHGVAR     VAR(&OFLAG) VALUE(&O_WRONLY + &O_CREAT + &O_TRUNC + &O_APPEND + &O_SYNC + &O_TEXTDATA)
             CALLPRC    PRC('open') PARM((&FILEPATH) (&OFLAG *BYVAL) (&MODE *BYVAL)) RTNVAL(&FD)
             /* by copying &NATIVE char(16) into &BFP we are actually setting &NATIVEP pointer */
             CHGVAR     VAR(&BFP) VALUE(&NATIVE)
             CHGVAR     VAR(&CURR_P) VALUE(&NATIVP)
             CHGVAR     VAR(&EPOS) VALUE(0)
             CHGVAR     VAR(&OUT_BYTES) VALUE(400000)
 NEXT_I:     CHGVAR     VAR(&SPOS) VALUE(&EPOS + 1)
             CHGVAR     VAR(&EPOS) VALUE(%SCAN(&OA &HTML &SPOS))
                        /* No more LINE FEEDs */
             IF         COND(&EPOS *EQ 0) THEN(GOTO CMDLBL(SKIP_I))
                        /* LINE FEED beyond end of content */
             IF         COND(%SST(&HTML 1 1) *EQ &NL) THEN(GOTO CMDLBL(SKIP_I))
             CHGVAR     VAR(&LEN) VALUE(&EPOS - &SPOS)
             CHGVAR     VAR(&IN_BYTES) VALUE(&LEN + 1)
                        /* LINE FEED beyond end of content because */
                        /* terminating LINE FEED is M_I_S_S_I_N_G! */
             IF         COND(&BODY_LEN *LT &IN_BYTES) THEN(DO)
               CHGVAR     VAR(&IN_BYTES) VALUE(&BODY_LEN)
               CHGVAR     VAR(&BODY_LEN) VALUE(0)
             ENDDO
                         /* these are the bytes that WILL remain to be converted & written */
             ELSE DO
               CHGVAR     VAR(&BODY_LEN) VALUE(&BODY_LEN - &IN_BYTES)
             ENDDO
             CHGVAR     VAR(&HTML_E) VALUE(' ')
             CHGVAR     VAR(&HTML_P) VALUE(%ADDRESS(&HTML_E))
             CHGVAR     VAR(&PRE_BYTES) VALUE(&OUT_BYTES)
             CALLPRC    PRC('iconv') PARM((&CONVB *BYVAL) (&CURR_P) (&IN_BYTES) (&HTML_P) (&OUT_BYTES)) RTNVAL(&RC)
                        /* should never occur */
             IF         COND(%SST(&HTML_E 1 1) *EQ &NL) THEN(GOTO CMDLBL(SKIP_I))
             CHGVAR     VAR(&PRE_BYTES) VALUE(&PRE_BYTES - &OUT_BYTES)
             IF         COND(&PRE_BYTES *EQ 0) THEN(GOTO CMDLBL(SKIP_I))
             CALLPRC    PRC('write') PARM((&FD *BYVAL) (&HTML_E *BYREF) (&PRE_BYTES *BYVAL)) RTNVAL(&RTCD)
             CHGVAR     VAR(&EPOS) VALUE(0)
             CHGVAR     VAR(&NATIVP) VALUE(&CURR_P)
             GOTO       CMDLBL(NEXT_I)
 SKIP_I:     /* DMPCLPGM */
             CALLPRC    PRC('close') PARM((&FD *BYVAL)) RTNVAL(&RTCD)

             CHGPFM     FILE(QTEMP/&PKG_FILN) MBR(&PKG_MBRN) SRCTYPE(&PKG_EXTN) TEXT(&PKG_TEXT)
             CALLPRC    PRC('EASY_CLEAN') PARM((&FUNCS_PTR) (&CURL))
             CHGVAR     VAR(%OFFSET(&PKG_LPTR)) VALUE(%OFFSET(&PKG_LPTR) + 91)
             CHGVAR     VAR(&COUNT) VALUE(&COUNT + 1)
             IF         COND(&COUNT *LT &TOTCNT) THEN(GOTO CMDLBL(REPEAT_I))
 CLOSE:      CALLPRC    PRC('Qp2dlclose') PARM((&IDC *BYVAL)) RTNVAL(&RTCD)
             IF         COND(&RTCD *NE 0) THEN(DO)
             CALLPRC    PRC('Qp2dlerror') RTNVAL(&ERR_P)
             IF         COND(&ERR_P *NE &NULL) THEN(SNDPGMMSG MSG(&MSG))
             ENDDO
             CALLPRC    PRC('Qp2dlclose') PARM((&ID *BYVAL)) RTNVAL(&RTCD)
             IF         COND(&RTCD *NE 0) THEN(DO)
             CALLPRC    PRC('Qp2dlerror') RTNVAL(&ERR_P)
             IF         COND(&ERR_P *NE &NULL) THEN(SNDPGMMSG MSG(&MSG))
             ENDDO
END:         CALLPRC    PRC('Qp2EndPase') RTNVAL(&RTCD)
             IF         COND(&RTCD *NE 0) THEN(SNDPGMMSG MSG('La chiamata Qp2EndPase ha dato errore.'))
             ADDLIBLE   LIB(TMKMAKE)
             MONMSG MSGID(CPF0000)
             CRTBNDCL   PGM(QTEMP/BUILD) SRCFILE(QTEMP/QCLSRC) SRCMBR(BUILD) +
                        OUTPUT(&SPOOL)
             MONMSG     MSGID(CPF0000) EXEC(GOTO CMDLBL(FINE))
             CHGJOB     LOG(4 00 &LOG) LOGCLPGM(&LOGCLPGM)    
             CALL PGM(QTEMP/BUILD) PARM(&DEVOPT &TGTRLS &TGTLIB)
             MONMSG MSGID(CPF0000)
             IF         COND(&VERBOSE *EQ 'L') THEN(DO)
             OVRDBF     FILE(STDOUT) TOFILE(QPRINT) OVRSCOPE(*JOB) SHARE(*YES)
             CHGVAR     VAR(&COUNT) VALUE(0)
             CHGVAR     VAR(&PKG_LPTR) VALUE(%ADDRESS(&PKG_BLCK))
             DOWHILE    COND(&COUNT *LT &TOTCNT)
             CHGVAR     VAR(&MSGDTA) VALUE( 'File: '      *CAT &PKG_FILN *CAT +
                                           ' Member: '    *CAT &PKG_MBRN *CAT +
                                           ' Attribute: ' *CAT &PKG_EXTN *CAT +
                                           ' Text: '      *CAT &PKG_TEXT *CAT &X15 *CAT &NL)
             CALLPRC    PRC('printf') PARM((&MSGDTA))
             CHGVAR     VAR(&COUNT) VALUE(&COUNT + 1)
             CHGVAR     VAR(%OFFSET(&PKG_LPTR)) VALUE(%OFFSET(&PKG_LPTR) + 91)
             ENDDO
             CHGVAR     VAR(&MSGDTA) VALUE( 'Version: '    *CAT &CUR_OSV *CAT +
                       '                     Language Feature: ' *CAT &LANG_FC *CAT &NL)
             CALLPRC    PRC('printf') PARM((&MSGDTA))
             DLTOVR     FILE(STDOUT) LVL(*JOB)
             ENDDO
             GOTO       CMDLBL(FINE)
FINE:        ENDPGM
